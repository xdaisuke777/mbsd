using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
namespace MBSD
{
    public class ConfigInfo
    {
        private int index;
        private string url;
        private string query_parameter;
        private int attack_type;
        private int omomi_type;
        private int target_security_code;
        private int attack_pattern;
        private bool security_flag;
        private int before_status_code;
        private string before_url_sorce;
        private int after_status_code;
        private string after_url_sorce;
        private string paramtuki_url; // url と query_parameterを足したもの


        private Dictionary<string, string> dictionary = new Dictionary<string, string>{ };
        private string url_key_value;
        private string method;

        // 引数なしコンストラクタ
        public ConfigInfo()
        {

        }

        // コンストラクタ
        public ConfigInfo(int no, string url, string query_parameter, int attack_type, int omomi_type, int target_status_code, int attack_pattern, string method)
        {
            this.index = no;
            this.url = url;
            this.query_parameter = query_parameter;
            this.attack_type = attack_type;
            this.omomi_type = omomi_type;
            this.target_security_code = target_status_code;
            this.attack_pattern = attack_pattern;
            // 初期化の値を代入
            this.security_flag = false;
            this.method = method;

            // urlから攻撃前のステータスコードをセットする
            setRequestURLStatuCode();
            // this.before_status_code = ;
            // urlから攻撃前のソースファイルをセットする
            setRequestURLSroce();
            if (this.method == "GET")
            {
                // this.before_url_sorce = "";
                this.paramtuki_url = url + query_parameter;
                // 攻撃後のソースとステータスコードをセットする
                this.after_status_code = requestURLStatusCode(this.paramtuki_url);
                this.after_url_sorce = requestURLSroce(this.paramtuki_url);
            }
            else
            {
                string url_key_value = "";
                foreach (var n in key_value())
                {
                    this.dictionary.Add(n.Key, n.Value);
                    url_key_value = url_key_value + string.Format("key:{0} value:{1}", n.Key, n.Value) + " ";
                }
                this.url_key_value = string.Format("{0}  ",this.url) + url_key_value.Substring(0,url_key_value.Length-1);
                this.paramtuki_url = url;
                post_after_set_htmlsorce(dictionary);
                post_after_set_statuscode(dictionary);
            }

        }
        public int getAttackType()
        {
            return this.attack_type;
        }
        //脆弱性とみなすステータスコードの取得
        public int getTargetSecurityCode()
        {
            return this.target_security_code;
        }
        public string getURL()
        {
            return this.url;
        }
        public string getParamtukiURL()
        {
            return this.paramtuki_url;
        }
        public int getAttackPattern()
        {
            return this.attack_pattern;
        }
        public void setSecurityFlag(bool security_flag)
        {
            this.security_flag = security_flag;
        }
        public string makeFormat()
        {
            Hashtable ht = new Hashtable
            {
                [200] = "OK",
                [302] = "Found",
                [403] = "Forbidden",
                [404] = "Not found"
            };
            //int target_status_code = Int32.Parse(splitArray[5]);
            string no = this.index.ToString();
            string url = this.paramtuki_url;
            string method = this.method;
            if (method == "POST")
            {
                url = this.url_key_value;
            }
            string status_code = this.after_status_code.ToString();
            string status_name = (string)ht[this.after_status_code];
            string attack_type = this.attack_type.ToString();
            string omomi_type = this.omomi_type.ToString();
            bool isFlag = this.security_flag;
            if (isFlag == false)
            {
                omomi_type = "0";
            }
            string format = no + "," + url + "," + method +"," + status_code + "," + status_name + "," + attack_type + "," + omomi_type;
            return format;
        }
        // セッター
        public void setRequestURLSroce()
        {
            try
            {
                string url = this.url;
                var handler = new HttpClientHandler
                {
                    // 自動でリダイレクトする機能をOFFにする
                    AllowAutoRedirect = false
                };
                // ハンドラーを指定してHttpClientを作る
                using (var client = new HttpClient(handler))
                {
                    var uri = new Uri(url);
                    var r = client.GetAsync(uri).Result;
                    var tmpStatusCode = (int)r.StatusCode;
                    // 404または403以外のときにソースを取得する
                    Task<string> r2 = client.GetStringAsync(url);
                    this.before_url_sorce = r2.Result;
                }
            }
            catch (Exception e)
            {
                this.before_url_sorce = "";
                Console.WriteLine(e.Message);
            }
        }
        public string getRequestURLSroce()
        {
            return this.before_url_sorce;
        }
        public string getRequestURLAfterSroce()
        {
            return this.after_url_sorce;
        }
        public void setRequestURLStatuCode()
        {
            string url = this.url;
            // urlに対してのステータスコードセットする処理を下記に記載する
            var handler = new HttpClientHandler
            {
                // 自動でリダイレクトする機能をOFFにする
                AllowAutoRedirect = false
            };
            // ハンドラーを指定してHttpClientを作る
            using (var client = new HttpClient(handler))
            {
                this.url = url;
                var uri = new Uri(url);
                var r = client.GetAsync(uri).Result;
                this.before_status_code = (int)r.StatusCode;
            }
        }
        public int getRequestURLStatuCode()
        {
            return this.before_status_code;
        }
        public int getRequestURLAfterStatuCode()
        {
            return this.after_status_code;
        }


        public string getMethod()
        {
            return this.method;
        }

        public string getUrl_Key_Value()
        {
            return this.url_key_value;
        }

        public Dictionary<string, string> getDictionary()
        {
            return this.dictionary;
        }

        public string requestURLSroce(string url)
        {
            // ソースファイル
            string srocefile = "";
            try
            {
                bool isFlag = false;
                if (this.target_security_code == 302)
                {
                    isFlag = true;
                }
                var handler = new HttpClientHandler
                {
                    // 自動でリダイレクトする機能をOFF(falseの場合OFF)にする
                    AllowAutoRedirect = isFlag

                };
                // ハンドラーを指定してHttpClientを作る
                using (var client = new HttpClient(handler))
                {
                    
                    var uri = new Uri(url);
                    var r = client.GetAsync(uri).Result;
                    Task<string> r2 = client.GetStringAsync(url);
                    srocefile = r2.Result;
                }
                return srocefile;
            }
            catch (Exception e)
            {
                return srocefile;
            }
        }
        public int requestURLStatusCode(string url)
        {
            // ステータスコード
            string status_code = "";
            try
            {

                // urlに対してのステータスを取得する処理
                // urlに対してのステータスコードセットする処理を下記に記載する
                var handler = new HttpClientHandler
                {
                    // 自動でリダイレクトする機能をOFFにする
                    AllowAutoRedirect = false
                };
                // ハンドラーを指定してHttpClientを作る
                using (var client = new HttpClient(handler))
                {
                    var uri = new Uri(url);
                    var r = client.GetAsync(uri).Result;
                    status_code = string.Format("{0}", (int)r.StatusCode);
                }


                return Int32.Parse(status_code);
            }
            catch (Exception e)
            {
                return 9999;
            }
        }

        public int getLength()
        {
            string[] elements_list = { "no", "url", "query_parameter", "attack_type", "omomi_type", "target_status_code", "attack_pattern", "method" };

            return elements_list.Length;

        }


        public void post_after_set_htmlsorce(Dictionary<string, string> dictionary)
        {
            try
            {               
                bool isFlag = false;
                if (this.target_security_code == 302)
                {
                    isFlag = true;
                }
                var handler = new HttpClientHandler
                {
                    // 自動でリダイレクトする機能をOFFにする
                    AllowAutoRedirect = isFlag
                };
                using (var client = new HttpClient(handler))
                {
                    var content = new FormUrlEncodedContent(dictionary);
                    var uri = new Uri(this.url);
                    var res = client.PostAsync(uri, content).Result;
                    string html = res.Content.ReadAsStringAsync().Result;
                    this.after_url_sorce = html;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                this.after_url_sorce = "";
            }
        }


        public void post_after_set_statuscode(Dictionary<string, string> dictionary)
        {
            try
            {             
                var handler = new HttpClientHandler
                {
                    // 自動でリダイレクトする機能をOFFにする
                    AllowAutoRedirect = false
                };
                using (var client = new HttpClient(handler))
                {
                    var content = new FormUrlEncodedContent(dictionary);
                    var uri = new Uri(this.url);
                    var res = client.PostAsync(uri, content).Result;
                    this.after_status_code = (int)res.StatusCode;
                }

            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                this.after_status_code = 9999;
            }
        }


        public Dictionary<string, string> key_value()
        {
            var dictionary = new Dictionary<string, string> { };
            string key = "";
            string values = "";
            string target = this.query_parameter;
            int start = 0;
            int end = 0;
            while (end < target.Length)
            {
                while (true) //key
                {
                    if (target.Substring(end, 1) == "=")
                    {
                        Console.WriteLine(target.Substring(start + 1, end - start - 1));
                        key = target.Substring(start + 1, end - start - 1);
                        start = end;
                        break;
                    }
                    end++;
                }
                while (true)//values
                {
                    if (end == target.Length || target.Substring(end, 1) == "&")
                    {
                        Console.WriteLine(target.Substring(start + 1, end - start - 1));
                        values = target.Substring(start + 1, end - start - 1);
                        start = end;
                        break;
                    }
                    end++;
                }
                dictionary.Add(key, values);
            }
            return dictionary;
        }
    }
}